"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
const flatbuffers = require("flatbuffers");
const inference_result_1 = require("../aitrios/inference-result");
class Metadata {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMetadata(bb, obj) {
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMetadata(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    timestamp() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    deviceId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    inferenceId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    inferenceResult(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new inference_result_1.InferenceResult()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    inferenceResultLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startMetadata(builder) {
        builder.startObject(4);
    }
    static addTimestamp(builder, timestamp) {
        builder.addFieldInt64(0, timestamp, BigInt('0'));
    }
    static addDeviceId(builder, deviceIdOffset) {
        builder.addFieldOffset(1, deviceIdOffset, 0);
    }
    static addInferenceId(builder, inferenceIdOffset) {
        builder.addFieldOffset(2, inferenceIdOffset, 0);
    }
    static addInferenceResult(builder, inferenceResultOffset) {
        builder.addFieldOffset(3, inferenceResultOffset, 0);
    }
    static createInferenceResultVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startInferenceResultVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endMetadata(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMetadataBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMetadataBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMetadata(builder, timestamp, deviceIdOffset, inferenceIdOffset, inferenceResultOffset) {
        Metadata.startMetadata(builder);
        Metadata.addTimestamp(builder, timestamp);
        Metadata.addDeviceId(builder, deviceIdOffset);
        Metadata.addInferenceId(builder, inferenceIdOffset);
        Metadata.addInferenceResult(builder, inferenceResultOffset);
        return Metadata.endMetadata(builder);
    }
}
exports.Metadata = Metadata;
