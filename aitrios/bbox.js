"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.BBox = void 0;
const flatbuffers = require("flatbuffers");
class BBox {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBBox(bb, obj) {
        return (obj || new BBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBBox(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    x() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    y() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    width() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    height() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    static startBBox(builder) {
        builder.startObject(4);
    }
    static addX(builder, x) {
        builder.addFieldInt32(0, x, 0);
    }
    static addY(builder, y) {
        builder.addFieldInt32(1, y, 0);
    }
    static addWidth(builder, width) {
        builder.addFieldInt32(2, width, 0);
    }
    static addHeight(builder, height) {
        builder.addFieldInt32(3, height, 0);
    }
    static endBBox(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createBBox(builder, x, y, width, height) {
        BBox.startBBox(builder);
        BBox.addX(builder, x);
        BBox.addY(builder, y);
        BBox.addWidth(builder, width);
        BBox.addHeight(builder, height);
        return BBox.endBBox(builder);
    }
}
exports.BBox = BBox;
