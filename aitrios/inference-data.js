"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceData = void 0;
const flatbuffers = require("flatbuffers");
const bbox_1 = require("../aitrios/bbox");
class InferenceData {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsInferenceData(bb, obj) {
        return (obj || new InferenceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsInferenceData(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InferenceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    label(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    score() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    bbox(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new bbox_1.BBox()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startInferenceData(builder) {
        builder.startObject(3);
    }
    static addLabel(builder, labelOffset) {
        builder.addFieldOffset(0, labelOffset, 0);
    }
    static addScore(builder, score) {
        builder.addFieldFloat32(1, score, 0.0);
    }
    static addBbox(builder, bboxOffset) {
        builder.addFieldOffset(2, bboxOffset, 0);
    }
    static endInferenceData(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
exports.InferenceData = InferenceData;
