"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceResult = void 0;
const flatbuffers = require("flatbuffers");
const inference_data_1 = require("../aitrios/inference-data");
class InferenceResult {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsInferenceResult(bb, obj) {
        return (obj || new InferenceResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsInferenceResult(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InferenceResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    inferenceType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    inferenceData(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new inference_data_1.InferenceData()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    inferenceDataLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startInferenceResult(builder) {
        builder.startObject(2);
    }
    static addInferenceType(builder, inferenceTypeOffset) {
        builder.addFieldOffset(0, inferenceTypeOffset, 0);
    }
    static addInferenceData(builder, inferenceDataOffset) {
        builder.addFieldOffset(1, inferenceDataOffset, 0);
    }
    static createInferenceDataVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startInferenceDataVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endInferenceResult(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createInferenceResult(builder, inferenceTypeOffset, inferenceDataOffset) {
        InferenceResult.startInferenceResult(builder);
        InferenceResult.addInferenceType(builder, inferenceTypeOffset);
        InferenceResult.addInferenceData(builder, inferenceDataOffset);
        return InferenceResult.endInferenceResult(builder);
    }
}
exports.InferenceResult = InferenceResult;
